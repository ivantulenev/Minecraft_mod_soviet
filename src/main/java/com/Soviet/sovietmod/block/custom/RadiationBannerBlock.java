package com.Soviet.sovietmod.block.custom;

import net.minecraft.block.Block;
import net.minecraft.block.BlockState;
import net.minecraft.block.HorizontalBlock;
import net.minecraft.item.BlockItemUseContext;
import net.minecraft.state.StateContainer;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.shapes.IBooleanFunction;
import net.minecraft.util.math.shapes.ISelectionContext;
import net.minecraft.util.math.shapes.VoxelShape;
import net.minecraft.util.math.shapes.VoxelShapes;
import net.minecraft.world.IBlockReader;

import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import java.util.stream.Stream;

public class RadiationBannerBlock extends HorizontalBlock  {

    public static final VoxelShape SHAPE_S = makeShape_S();
    public static final VoxelShape SHAPE_N = makeShape_N();
    public static final VoxelShape SHAPE_E = makeShape_E();
    public static final VoxelShape SHAPE_W = makeShape_W();

    public RadiationBannerBlock(Properties p_i48377_1_) {
        super(p_i48377_1_);
    }

    @Override
    protected void createBlockStateDefinition(StateContainer.Builder<Block, BlockState> builder) {
        builder.add(FACING);
    }

    @Nullable
    @Override
    public BlockState getStateForPlacement(BlockItemUseContext context) {
        return this.getBlock().defaultBlockState().setValue(FACING, context.getHorizontalDirection().getOpposite());
    }

    @Override
    @ParametersAreNonnullByDefault
    public VoxelShape getShape(BlockState state, IBlockReader worldIn, BlockPos pos, ISelectionContext context) {
        switch (state.getValue(FACING)) {
            case SOUTH:
                return SHAPE_S;
            case EAST:
                return SHAPE_E;
            case WEST:
                return SHAPE_W;
            default:
                return SHAPE_N;
        }
    }

    public static VoxelShape makeShape_N(){
        return Stream.of(
                Block.box(13.4, -1.3877787807814457e-16, 7.6, 14.4, 1.2000000000000002, 8.4),
                Block.box(13.000000000000002, 1.2000000000000002, 7.6, 14.000000000000002, 2.4000000000000004, 8.4),
                Block.box(12.500000000000004, 2.4000000000000012, 7.6, 13.500000000000004, 3.6000000000000014, 8.4),
                Block.box(11.900000000000006, 3.6000000000000014, 7.6, 12.900000000000006, 4.799999999999999, 8.4),
                Block.box(11.500000000000007, 4.800000000000001, 7.6, 12.500000000000007, 5.9999999999999964, 8.4),
                Block.box(11.000000000000009, 5.999999999999998, 7.6, 12.000000000000009, 7.199999999999994, 8.4),
                Block.box(10.400000000000011, 7.199999999999996, 7.6, 11.400000000000011, 8.399999999999991, 8.4),
                Block.box(9.900000000000013, 8.399999999999991, 7.6, 10.900000000000013, 9.599999999999987, 8.4),
                Block.box(9.500000000000014, 9.599999999999987, 7.6, 10.500000000000014, 10.799999999999983, 8.4),
                Block.box(9.000000000000016, 10.799999999999983, 7.6, 10.000000000000016, 11.999999999999979, 8.4),
                Block.box(8.500000000000018, 11.999999999999979, 7.6, 9.500000000000018, 13.199999999999974, 8.4),
                Block.box(7.90000000000002, 13.199999999999974, 7.6, 8.90000000000002, 14.39999999999997, 8.4),
                Block.box(2.90000000000002, 13.599999999999975, 7.6, 5.5000000000000195, 14.39999999999997, 8.4),
                Block.box(7.500000000000021, 14.39999999999997, 7.6, 8.500000000000021, 15.599999999999966, 8.4),
                Block.box(2.7000000000000206, 14.39999999999997, 7.6, 8.500000000000021, 15.599999999999966, 8.4),
                Block.box(2.7000000000000215, 15.599999999999966, 7.6, 8.800000000000022, 16.799999999999976, 8.4),
                Block.box(2.7000000000000215, 16.599999999999966, 7.6, 10.900000000000023, 17.799999999999976, 8.4),
                Block.box(2.7000000000000215, 17.799999999999983, 7.6, 10.900000000000023, 18.999999999999993, 8.4),
                Block.box(2.7000000000000215, 19, 7.6, 10.200000000000024, 20.20000000000001, 8.4),
                Block.box(2.7000000000000215, 20.200000000000017, 7.6, 9.000000000000025, 21.400000000000027, 8.4),
                Block.box(2.7000000000000215, 21.400000000000034, 7.6, 7.800000000000025, 22.600000000000044, 8.4),
                Block.box(2.7000000000000215, 22.600000000000048, 7.6, 6.000000000000025, 22.700000000000056, 8.4),
                Block.box(5.900000000000022, 22.60000000000005, 7.6, 6.700000000000024, 23.80000000000006, 8.4),
                Block.box(6.700000000000021, 22.60000000000005, 7.6, 7.500000000000023, 23.100000000000062, 8.4),
                Block.box(7.800000000000017, 21.400000000000034, 7.6, 8.60000000000002, 21.900000000000045, 8.4),
                Block.box(9.000000000000012, 20.20000000000002, 7.6, 9.800000000000015, 20.70000000000003, 8.4),
                Block.box(10.200000000000008, 19.000000000000004, 7.6, 11.00000000000001, 19.500000000000014, 8.4),
                Block.box(10.900000000000006, 18.399999999999995, 7.6, 11.500000000000009, 18.900000000000006, 8.4),
                Block.box(8.800000000000008, 15.999999999999995, 7.6, 9.700000000000012, 16.600000000000016, 8.4),
                Block.box(10.900000000000006, 16.899999999999977, 7.6, 11.700000000000008, 18.399999999999988, 8.4),
                Block.box(5.500000000000024, 23.30000000000006, 7.6, 5.900000000000026, 23.70000000000007, 8.4),
                Block.box(6.700000000000021, 23.10000000000006, 7.6, 7.100000000000023, 23.500000000000068, 8.4),
                Block.box(7.800000000000017, 21.90000000000004, 7.6, 8.200000000000019, 22.30000000000005, 8.4),
                Block.box(9.000000000000012, 20.700000000000024, 7.6, 9.400000000000015, 21.100000000000033, 8.4),
                Block.box(10.200000000000008, 19.500000000000007, 7.6, 10.60000000000001, 19.900000000000016, 8.4),
                Block.box(10.900000000000006, 18.9, 7.6, 11.300000000000008, 19.300000000000008, 8.4),
                Block.box(9.70000000000001, 16.2, 7.6, 10.100000000000012, 16.600000000000012, 8.4),
                Block.box(11.700000000000003, 16.99999999999997, 7.6, 12.100000000000005, 17.999999999999982, 8.4),
                Block.box(4.200000000000024, 22.60000000000005, 7.6, 5.900000000000027, 23.30000000000006, 8.4)
        ).reduce((v1, v2) -> VoxelShapes.join(v1, v2, IBooleanFunction.OR)).get();
    }

    public static VoxelShape makeShape_W(){
        return Stream.of(
                Block.box(7.599999999999996, -1.3877787807814457e-16, 1.6000000000000032, 8.399999999999997, 1.2000000000000002, 2.600000000000003),
                Block.box(7.599999999999996, 1.2000000000000002, 2.0000000000000018, 8.399999999999997, 2.4000000000000004, 3.0000000000000018),
                Block.box(7.599999999999996, 2.4000000000000012, 2.5, 8.399999999999997, 3.6000000000000014, 3.5),
                Block.box(7.599999999999996, 3.6000000000000014, 3.099999999999998, 8.399999999999997, 4.799999999999999, 4.099999999999998),
                Block.box(7.599999999999996, 4.800000000000001, 3.4999999999999964, 8.399999999999997, 5.9999999999999964, 4.4999999999999964),
                Block.box(7.599999999999996, 5.999999999999998, 3.9999999999999947, 8.399999999999997, 7.199999999999994, 4.999999999999995),
                Block.box(7.599999999999996, 7.199999999999996, 4.5999999999999925, 8.399999999999997, 8.399999999999991, 5.5999999999999925),
                Block.box(7.599999999999996, 8.399999999999991, 5.099999999999991, 8.399999999999997, 9.599999999999987, 6.099999999999991),
                Block.box(7.599999999999996, 9.599999999999987, 5.499999999999989, 8.399999999999997, 10.799999999999983, 6.499999999999989),
                Block.box(7.599999999999996, 10.799999999999983, 5.999999999999988, 8.399999999999997, 11.999999999999979, 6.999999999999988),
                Block.box(7.599999999999996, 11.999999999999979, 6.499999999999986, 8.399999999999997, 13.199999999999974, 7.499999999999986),
                Block.box(7.599999999999996, 13.199999999999974, 7.099999999999984, 8.399999999999997, 14.39999999999997, 8.099999999999984),
                Block.box(7.599999999999996, 13.599999999999975, 10.499999999999984, 8.399999999999997, 14.39999999999997, 13.099999999999984),
                Block.box(7.599999999999996, 14.39999999999997, 7.499999999999982, 8.399999999999997, 15.599999999999966, 8.499999999999982),
                Block.box(7.599999999999996, 14.39999999999997, 7.499999999999982, 8.399999999999997, 15.599999999999966, 13.299999999999983),
                Block.box(7.599999999999996, 15.599999999999966, 7.1999999999999815, 8.399999999999997, 16.799999999999976, 13.299999999999983),
                Block.box(7.599999999999996, 16.599999999999966, 5.09999999999998, 8.399999999999997, 17.799999999999976, 13.299999999999983),
                Block.box(7.599999999999996, 17.799999999999983, 5.09999999999998, 8.399999999999997, 18.999999999999993, 13.299999999999983),
                Block.box(7.599999999999996, 19, 5.799999999999979, 8.399999999999997, 20.20000000000001, 13.299999999999983),
                Block.box(7.599999999999996, 20.200000000000017, 6.999999999999979, 8.399999999999997, 21.400000000000027, 13.299999999999983),
                Block.box(7.599999999999996, 21.400000000000034, 8.199999999999978, 8.399999999999997, 22.600000000000044, 13.299999999999983),
                Block.box(7.599999999999996, 22.600000000000048, 9.999999999999979, 8.399999999999997, 22.700000000000056, 13.299999999999983),
                Block.box(7.599999999999996, 22.60000000000005, 9.29999999999998, 8.399999999999997, 23.80000000000006, 10.099999999999982),
                Block.box(7.599999999999996, 22.60000000000005, 8.49999999999998, 8.399999999999997, 23.100000000000062, 9.299999999999983),
                Block.box(7.599999999999996, 21.400000000000034, 7.399999999999984, 8.399999999999997, 21.900000000000045, 8.199999999999987),
                Block.box(7.599999999999996, 20.20000000000002, 6.199999999999989, 8.399999999999997, 20.70000000000003, 6.999999999999991),
                Block.box(7.599999999999996, 19.000000000000004, 4.999999999999993, 8.399999999999997, 19.500000000000014, 5.799999999999995),
                Block.box(7.599999999999996, 18.399999999999995, 4.499999999999995, 8.399999999999997, 18.900000000000006, 5.099999999999998),
                Block.box(7.599999999999996, 15.999999999999995, 6.299999999999992, 8.399999999999997, 16.600000000000016, 7.199999999999996),
                Block.box(7.599999999999996, 16.899999999999977, 4.299999999999995, 8.399999999999997, 18.399999999999988, 5.099999999999998),
                Block.box(7.599999999999996, 23.30000000000006, 10.099999999999977, 8.399999999999997, 23.70000000000007, 10.499999999999979),
                Block.box(7.599999999999996, 23.10000000000006, 8.89999999999998, 8.399999999999997, 23.500000000000068, 9.299999999999983),
                Block.box(7.599999999999996, 21.90000000000004, 7.799999999999985, 8.399999999999997, 22.30000000000005, 8.199999999999987),
                Block.box(7.599999999999996, 20.700000000000024, 6.599999999999989, 8.399999999999997, 21.100000000000033, 6.999999999999991),
                Block.box(7.599999999999996, 19.500000000000007, 5.399999999999993, 8.399999999999997, 19.900000000000016, 5.799999999999995),
                Block.box(7.599999999999996, 18.9, 4.699999999999996, 8.399999999999997, 19.300000000000008, 5.099999999999998),
                Block.box(7.599999999999996, 16.2, 5.8999999999999915, 8.399999999999997, 16.600000000000012, 6.299999999999994),
                Block.box(7.599999999999996, 16.99999999999997, 3.8999999999999986, 8.399999999999997, 17.999999999999982, 4.300000000000001),
                Block.box(7.599999999999996, 22.60000000000005, 10.099999999999977, 8.399999999999997, 23.30000000000006, 11.79999999999998)
        ).reduce((v1, v2) -> VoxelShapes.join(v1, v2, IBooleanFunction.OR)).get();
    }

    public static VoxelShape makeShape_S(){
        return Stream.of(
                Block.box(1.5999999999999996, -1.3877787807814457e-16, 7.600000000000007, 2.5999999999999996, 1.2000000000000002, 8.400000000000007),
                Block.box(1.9999999999999982, 1.2000000000000002, 7.600000000000007, 2.9999999999999982, 2.4000000000000004, 8.400000000000007),
                Block.box(2.4999999999999964, 2.4000000000000012, 7.600000000000007, 3.4999999999999964, 3.6000000000000014, 8.400000000000007),
                Block.box(3.0999999999999943, 3.6000000000000014, 7.600000000000007, 4.099999999999994, 4.799999999999999, 8.400000000000007),
                Block.box(3.499999999999993, 4.800000000000001, 7.600000000000007, 4.499999999999993, 5.9999999999999964, 8.400000000000007),
                Block.box(3.999999999999991, 5.999999999999998, 7.600000000000007, 4.999999999999991, 7.199999999999994, 8.400000000000007),
                Block.box(4.599999999999989, 7.199999999999996, 7.600000000000007, 5.599999999999989, 8.399999999999991, 8.400000000000007),
                Block.box(5.099999999999987, 8.399999999999991, 7.600000000000007, 6.099999999999987, 9.599999999999987, 8.400000000000007),
                Block.box(5.499999999999986, 9.599999999999987, 7.600000000000007, 6.499999999999986, 10.799999999999983, 8.400000000000007),
                Block.box(5.999999999999984, 10.799999999999983, 7.600000000000007, 6.999999999999984, 11.999999999999979, 8.400000000000007),
                Block.box(6.499999999999982, 11.999999999999979, 7.600000000000007, 7.499999999999982, 13.199999999999974, 8.400000000000007),
                Block.box(7.09999999999998, 13.199999999999974, 7.600000000000007, 8.09999999999998, 14.39999999999997, 8.400000000000007),
                Block.box(10.49999999999998, 13.599999999999975, 7.600000000000007, 13.09999999999998, 14.39999999999997, 8.400000000000007),
                Block.box(7.499999999999979, 14.39999999999997, 7.600000000000007, 8.499999999999979, 15.599999999999966, 8.400000000000007),
                Block.box(7.499999999999979, 14.39999999999997, 7.600000000000007, 13.29999999999998, 15.599999999999966, 8.400000000000007),
                Block.box(7.199999999999978, 15.599999999999966, 7.600000000000007, 13.29999999999998, 16.799999999999976, 8.400000000000007),
                Block.box(5.0999999999999766, 16.599999999999966, 7.600000000000007, 13.29999999999998, 17.799999999999976, 8.400000000000007),
                Block.box(5.0999999999999766, 17.799999999999983, 7.600000000000007, 13.29999999999998, 18.999999999999993, 8.400000000000007),
                Block.box(5.799999999999976, 19, 7.600000000000007, 13.29999999999998, 20.20000000000001, 8.400000000000007),
                Block.box(6.999999999999975, 20.200000000000017, 7.600000000000007, 13.29999999999998, 21.400000000000027, 8.400000000000007),
                Block.box(8.199999999999974, 21.400000000000034, 7.600000000000007, 13.29999999999998, 22.600000000000044, 8.400000000000007),
                Block.box(9.999999999999975, 22.600000000000048, 7.600000000000007, 13.29999999999998, 22.700000000000056, 8.400000000000007),
                Block.box(9.299999999999976, 22.60000000000005, 7.600000000000007, 10.099999999999978, 23.80000000000006, 8.400000000000007),
                Block.box(8.499999999999977, 22.60000000000005, 7.600000000000007, 9.29999999999998, 23.100000000000062, 8.400000000000007),
                Block.box(7.399999999999981, 21.400000000000034, 7.600000000000007, 8.199999999999983, 21.900000000000045, 8.400000000000007),
                Block.box(6.199999999999985, 20.20000000000002, 7.600000000000007, 6.999999999999988, 20.70000000000003, 8.400000000000007),
                Block.box(4.999999999999989, 19.000000000000004, 7.600000000000007, 5.799999999999992, 19.500000000000014, 8.400000000000007),
                Block.box(4.499999999999991, 18.399999999999995, 7.600000000000007, 5.099999999999994, 18.900000000000006, 8.400000000000007),
                Block.box(6.299999999999988, 15.999999999999995, 7.600000000000007, 7.199999999999992, 16.600000000000016, 8.400000000000007),
                Block.box(4.299999999999992, 16.899999999999977, 7.600000000000007, 5.099999999999994, 18.399999999999988, 8.400000000000007),
                Block.box(10.099999999999973, 23.30000000000006, 7.600000000000007, 10.499999999999975, 23.70000000000007, 8.400000000000007),
                Block.box(8.899999999999977, 23.10000000000006, 7.600000000000007, 9.29999999999998, 23.500000000000068, 8.400000000000007),
                Block.box(7.799999999999981, 21.90000000000004, 7.600000000000007, 8.199999999999983, 22.30000000000005, 8.400000000000007),
                Block.box(6.599999999999985, 20.700000000000024, 7.600000000000007, 6.999999999999988, 21.100000000000033, 8.400000000000007),
                Block.box(5.39999999999999, 19.500000000000007, 7.600000000000007, 5.799999999999992, 19.900000000000016, 8.400000000000007),
                Block.box(4.699999999999992, 18.9, 7.600000000000007, 5.099999999999994, 19.300000000000008, 8.400000000000007),
                Block.box(5.899999999999988, 16.2, 7.600000000000007, 6.29999999999999, 16.600000000000012, 8.400000000000007),
                Block.box(3.899999999999995, 16.99999999999997, 7.600000000000007, 4.299999999999997, 17.999999999999982, 8.400000000000007),
                Block.box(10.099999999999973, 22.60000000000005, 7.600000000000007, 11.799999999999976, 23.30000000000006, 8.400000000000007)
        ).reduce((v1, v2) -> VoxelShapes.join(v1, v2, IBooleanFunction.OR)).get();
    }

    public static VoxelShape makeShape_E(){
        return Stream.of(
                Block.box(7.600000000000003, -1.3877787807814457e-16, 13.400000000000004, 8.400000000000004, 1.2000000000000002, 14.400000000000004),
                Block.box(7.600000000000003, 1.2000000000000002, 13.000000000000005, 8.400000000000004, 2.4000000000000004, 14.000000000000005),
                Block.box(7.600000000000003, 2.4000000000000012, 12.500000000000007, 8.400000000000004, 3.6000000000000014, 13.500000000000007),
                Block.box(7.600000000000003, 3.6000000000000014, 11.90000000000001, 8.400000000000004, 4.799999999999999, 12.90000000000001),
                Block.box(7.600000000000003, 4.800000000000001, 11.50000000000001, 8.400000000000004, 5.9999999999999964, 12.50000000000001),
                Block.box(7.600000000000003, 5.999999999999998, 11.000000000000012, 8.400000000000004, 7.199999999999994, 12.000000000000012),
                Block.box(7.600000000000003, 7.199999999999996, 10.400000000000015, 8.400000000000004, 8.399999999999991, 11.400000000000015),
                Block.box(7.600000000000003, 8.399999999999991, 9.900000000000016, 8.400000000000004, 9.599999999999987, 10.900000000000016),
                Block.box(7.600000000000003, 9.599999999999987, 9.500000000000018, 8.400000000000004, 10.799999999999983, 10.500000000000018),
                Block.box(7.600000000000003, 10.799999999999983, 9.00000000000002, 8.400000000000004, 11.999999999999979, 10.00000000000002),
                Block.box(7.600000000000003, 11.999999999999979, 8.500000000000021, 8.400000000000004, 13.199999999999974, 9.500000000000021),
                Block.box(7.600000000000003, 13.199999999999974, 7.9000000000000234, 8.400000000000004, 14.39999999999997, 8.900000000000023),
                Block.box(7.600000000000003, 13.599999999999975, 2.9000000000000234, 8.400000000000004, 14.39999999999997, 5.500000000000023),
                Block.box(7.600000000000003, 14.39999999999997, 7.500000000000025, 8.400000000000004, 15.599999999999966, 8.500000000000025),
                Block.box(7.600000000000003, 14.39999999999997, 2.700000000000024, 8.400000000000004, 15.599999999999966, 8.500000000000025),
                Block.box(7.600000000000003, 15.599999999999966, 2.700000000000024, 8.400000000000004, 16.799999999999976, 8.800000000000026),
                Block.box(7.600000000000003, 16.599999999999966, 2.700000000000024, 8.400000000000004, 17.799999999999976, 10.900000000000027),
                Block.box(7.600000000000003, 17.799999999999983, 2.700000000000024, 8.400000000000004, 18.999999999999993, 10.900000000000027),
                Block.box(7.600000000000003, 19, 2.700000000000024, 8.400000000000004, 20.20000000000001, 10.200000000000028),
                Block.box(7.600000000000003, 20.200000000000017, 2.700000000000024, 8.400000000000004, 21.400000000000027, 9.000000000000028),
                Block.box(7.600000000000003, 21.400000000000034, 2.700000000000024, 8.400000000000004, 22.600000000000044, 7.800000000000029),
                Block.box(7.600000000000003, 22.600000000000048, 2.700000000000024, 8.400000000000004, 22.700000000000056, 6.000000000000028),
                Block.box(7.600000000000003, 22.60000000000005, 5.900000000000025, 8.400000000000004, 23.80000000000006, 6.700000000000028),
                Block.box(7.600000000000003, 22.60000000000005, 6.700000000000024, 8.400000000000004, 23.100000000000062, 7.500000000000027),
                Block.box(7.600000000000003, 21.400000000000034, 7.80000000000002, 8.400000000000004, 21.900000000000045, 8.600000000000023),
                Block.box(7.600000000000003, 20.20000000000002, 9.000000000000016, 8.400000000000004, 20.70000000000003, 9.800000000000018),
                Block.box(7.600000000000003, 19.000000000000004, 10.200000000000012, 8.400000000000004, 19.500000000000014, 11.000000000000014),
                Block.box(7.600000000000003, 18.399999999999995, 10.90000000000001, 8.400000000000004, 18.900000000000006, 11.500000000000012),
                Block.box(7.600000000000003, 15.999999999999995, 8.800000000000011, 8.400000000000004, 16.600000000000016, 9.700000000000015),
                Block.box(7.600000000000003, 16.899999999999977, 10.90000000000001, 8.400000000000004, 18.399999999999988, 11.700000000000012),
                Block.box(7.600000000000003, 23.30000000000006, 5.500000000000028, 8.400000000000004, 23.70000000000007, 5.9000000000000306),
                Block.box(7.600000000000003, 23.10000000000006, 6.700000000000024, 8.400000000000004, 23.500000000000068, 7.100000000000026),
                Block.box(7.600000000000003, 21.90000000000004, 7.80000000000002, 8.400000000000004, 22.30000000000005, 8.200000000000022),
                Block.box(7.600000000000003, 20.700000000000024, 9.000000000000016, 8.400000000000004, 21.100000000000033, 9.400000000000018),
                Block.box(7.600000000000003, 19.500000000000007, 10.200000000000012, 8.400000000000004, 19.900000000000016, 10.600000000000014),
                Block.box(7.600000000000003, 18.9, 10.90000000000001, 8.400000000000004, 19.300000000000008, 11.300000000000011),
                Block.box(7.600000000000003, 16.2, 9.700000000000014, 8.400000000000004, 16.600000000000012, 10.100000000000016),
                Block.box(7.600000000000003, 16.99999999999997, 11.700000000000006, 8.400000000000004, 17.999999999999982, 12.100000000000009),
                Block.box(7.600000000000003, 22.60000000000005, 4.200000000000028, 8.400000000000004, 23.30000000000006, 5.9000000000000306)
        ).reduce((v1, v2) -> VoxelShapes.join(v1, v2, IBooleanFunction.OR)).get();
    }

}
